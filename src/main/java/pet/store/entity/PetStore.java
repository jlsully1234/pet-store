package pet.store.entity;

import java.util.HashSet;
import java.util.Set;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
// The code is a java class definition for a PetStore entity, which is part of a Java Persistence API (JPA)
// application.

//This annotation specifies that the class is an entity and is mapped to a database table.


// This is a Lombok annotation that automatically generates getters, setters, toString, equals, and hashCode 
// methods for the class.
@Entity
@Data
public class PetStore {

// This is a Lombok annotation that automatically generates getters, setters, toString, equals, and hashCode 
// methods for the class.


//Specifies that the primary key value is automatically generated by the database using an identity column.

@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long petStoreId; //The unique identifier for each pet store

//These fields store various attributes
private String petStoreName;
private String petStoreAddress;
private String petStoreCity;
private String petStoreState;
private String petStoreZip;
private String petStorePhone;

// These Lombok annotations exclude the customers and employees fields from the equals, hashCode, and toString m
// methods to prevent potential issues with circular references and performance.

// Defines a many-to-many relationship between PetStore and Customer entities. The cascade = CascadeType.PERSIST 
// ensures that operations on PetStore are cascaded to Customer.

@EqualsAndHashCode.Exclude
@ToString.Exclude
@ManyToMany(cascade = CascadeType.PERSIST)

// Specifies the join table pet_store_customer used to manage the many-to-many relationship, with joinColumns
// and inverseJoinColumns defining the foreign keys.

@JoinTable(name = "pet_store_customer",
  joinColumns =@JoinColumn(name = "pet_store_id"),
  inverseJoinColumns =@JoinColumn(name = "customer_id"))
private Set<Customer> customers = new HashSet<>();

// Defines a one-to-many relationship between PetStore and Employee entities. The mappedBy attribute indicates
// that the petStore field in the Employee class owns the relationship. CascadeType.ALL means all operations are 
//cascaded, and orphanRemoval = true ensures that employees are removed if they are no longer associated with a

@OneToMany(mappedBy = "petStore", cascade = CascadeType.ALL,
		orphanRemoval = true)
@EqualsAndHashCode.Exclude
@ToString.Exclude

// this code creates a private set of Employee objects using a HashSet implementation, ensuring that the collection 
// does not contain duplicate Employee objects and is only accessible within the class it is defined in.
private Set<Employee> employees = new HashSet<>();

	
}
